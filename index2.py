import asyncio
import logging
from aiogram import Bot, Dispatcher,types,F
from aiogram.filters import Command
from aiogram.types import Message
import requests 
from random import choice
import yt_dlp
import os
import time
from aiogram.types import InputFile
import requests 
import pyttsx3 


logging.basicConfig(level=logging.INFO)
bot = Bot(token='7869107441:AAFQtwknik44NcV2_p3fJBZmwKIcyUjX5QA')
dp = Dispatcher()

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
waiting_for_weather = {}
waiting_for_response = {}

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.reply("–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start, /info, /button, /name, /weather –∏ –¥—Ä—É–≥–∏–µ.")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç")

@dp.message(Command("movie"))
async def cmd_movie(message: Message):
    genres = [
        ("–ö–æ–º–µ–¥–∏—è", "https://kinobar.my/komedii/"),
        ("–î—Ä–∞–º–∞", "https://kinobar.my/dramy/"),
        ("–ë–æ–µ–≤–∏–∫", "https://kinobar.my/boeviki/"),
        ("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "https://kinobar.my/fantastika/"),
        ("–£–∂–∞—Å—ã", "https://kinobar.my/uzhasyy/"),
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∂–∞–Ω—Ä–∞–º–∏
    buttons = [
        [types.InlineKeyboardButton(text=genre[0], url=genre[1])] for genre in genres
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=keyboard)
# –°–ª–æ–≤–∞—Ä—å —Å —Ç—Ä–µ–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
music_library = {
    "–ü–æ–ø": [
        "Dua Lipa - Levitating ffff",
        "The Weeknd - Blinding Lights",
        "Ava Max - Sweet but Psycho",
        "Ed Sheeran - Shivers",
        "Taylor Swift - Anti-Hero"
    ],
    "–†–æ–∫": [
        "Queen - Bohemian Rhapsody",
        "Nirvana - Smells Like Teen Spirit",
        "Led Zeppelin - Stairway to Heaven",
        "Linkin Park - Numb",
        "Metallica - Enter Sandman"
    ],
    "–•–∏–ø-—Ö–æ–ø": [
        "Drake - God's Plan",
        "Eminem - Lose Yourself",
        "Kanye West - Stronger",
        "Kendrick Lamar - Humble",
        "Post Malone - Circles"
    ],
    "–î–∂–∞–∑": [
        "Miles Davis - So What",
        "Louis Armstrong - What a Wonderful World",
        "Norah Jones - Don't Know Why",
        "John Coltrane - Giant Steps",
        "Diana Krall - The Look of Love"
    ],
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞": [
        "David Guetta - Titanium",
        "Avicii - Wake Me Up",
        "Calvin Harris - Summer",
        "Deadmau5 - Strobe",
        "Marshmello - Alone"
    ]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_music_sessions = {}

@dp.message(Command("music"))
async def cmd_music(message: Message):
    genres = list(music_library.keys())

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∂–∞–Ω—Ä–∞–º–∏
    buttons = [
        [types.InlineKeyboardButton(text=genre, callback_data=f"genre_{genre}")]
        for genre in genres
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("genre_"))
async def select_genre(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    genre = callback_query.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞
    available_tracks = music_library[genre]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Ç—Ä–µ–∫–∏
    if user_id not in user_music_sessions:
        user_music_sessions[user_id] = {}

    user_genre_tracks = user_music_sessions[user_id].get(genre, [])
    remaining_tracks = [track for track in available_tracks if track not in user_genre_tracks]

    # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    if not remaining_tracks:
        user_genre_tracks = []
        remaining_tracks = available_tracks

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫
    selected_tracks = [choice(remaining_tracks) for _ in range(3)]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_music_sessions[user_id][genre] = user_genre_tracks + selected_tracks

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(f"–í–æ—Ç —Ç—Ä–µ–∫–∏ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre}:\n" +
                                        "\n".join(f"- {track}" for track in selected_tracks))

    await callback_query.answer()

@dp.message(Command("button"))
async def cmd_button(message: Message):
    kb = [
        [types.KeyboardButton(text="–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞")],
        [types.KeyboardButton(text="–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer("–ö–∞–∫—É—é –∫–Ω–æ–ø–∫—É –≤—ã –≤—ã–±—Ä–∞–ª–∏?", reply_markup=keyboard)

@dp.message(lambda message: message.text == "–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞")
async def first_btn(message: Message):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É")

@dp.message(lambda message: message.text == "–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞")
async def second_btn(message: Message):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É")

@dp.message(Command("name"))
async def cmd_name(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{args[1]}</b>", parse_mode="HTML")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name!")

@dp.message(Command("weather"))
async def start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã?")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    waiting_for_weather[message.from_user.id] = True

@dp.message(F.text)
async def get_weather(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã
    if waiting_for_weather.get(message.from_user.id):
        city = message.text
        try:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid=your_api_key"
            weather_data = requests.get(url).json()

            temperature = weather_data["main"]["temp"]
            temperature_feels = weather_data["main"]["feels_like"]
            wind_speed = weather_data['wind']['speed']
            cloud_cover = weather_data['weather'][0]['description']
            humidity = weather_data['main']['humidity']

            await message.answer(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {temperature}¬∞C\n"
                                 f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temperature_feels}¬∞C\n"
                                 f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                                 f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_cover}\n"
                                 f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")
        except KeyError:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        waiting_for_weather[message.from_user.id] = False

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≥–æ–¥—É
        await analyze_mood(message)

@dp.message(F.animation)
async def echo_gif(message: types.Message):
    await message.reply_animation(message.animation.file_id)



async def analyze_mood(message: types.Message):
    text = message.text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if any(word in text for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Ä–∞–∑–≤–µ—Å–µ–ª–∏", "–¥–∞–≤–∞–π", "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", "–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"]):
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        recommendations = [
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ'!",
            "–í–æ—Ç —à—É—Ç–∫–∞: –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ –ø—Ä—è—Ç–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –∏–º –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏!",
            "–ó–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ –º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, —è –¥—É–º–∞—é –æ –∫–æ—Ç–∏–∫–∞—Ö! üê± –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–æ—Ç–∏–∫–∞–º–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç!",
        ]
        response = choice(recommendations)
        await message.answer(response)
    
    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É. –ù–æ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É –∏–ª–∏ —á—Ç–æ-—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å! –ù–∞–ø–∏—à–∏ '–¥–∞–≤–∞–π', –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É.")
        waiting_for_response[message.from_user.id] = True

@dp.message(lambda message: message.text.lower() == "–¥–∞–≤–∞–π")
async def tell_joke_or_motivation(message: types.Message):
    if waiting_for_response.get(message.from_user.id):
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ —Ñ—É—Ç–±–æ–ª? –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤–æ—Ä–æ—Ç–∞!",
            "–ö–∞–∫–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤? –ß–∞–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π!",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ ‚Äî —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–¥–µ—Ç –≤ –±–∞—Ä. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç '–æ–¥–∏–Ω –∫–æ–∫—Ç–µ–π–ª—å'. –ë–∞—Ä–º–µ–Ω –≥–æ–≤–æ—Ä–∏—Ç: '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ.' –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: '–¢–æ–≥–¥–∞ –æ—à–∏–±–∫—É –º–Ω–µ –≤ —Å—Ç–µ–∫.'",
            "–ü–æ—á–µ–º—É Java-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –≤–∏–¥—è—Ç C#!"
        ]
        
        motivations = [
            "–ù–µ –≤–∞–∂–Ω–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω–æ —Ç—ã –∏–¥–µ—à—å, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!",
            "–ü–æ–º–Ω–∏, –∫–∞–∂–¥—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∫–∞–∂–µ—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–º.",
        ]
        
        all_responses = jokes + motivations
        response = choice(all_responses)
        await message.answer(response)
        
        waiting_for_response[message.from_user.id] = False
    else:
        await message.answer("–ù–∞–ø–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å —à—É—Ç–∫—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")



engine = pyttsx3.init() 
 
engine.setProperty("rate",150) 
engine.setProperty("volume",0.9) 
 
 
engine.say("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?") 

engine.runAndWait() 
 
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
